service: kinesis-leaderboard

frameworkVersion: ">=1.8.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:table/${self:custom.dynamodb.tables.leaderboardTable.baseTable}*

plugins:
  - serverless-plugin-typescript

package:
  include:
    - src/
  exclude:
    - config/**
    - .envrc
    - .gitignore
    - package.json
    - yarn.lock
    - src/yarn.lock
    - src/package.json
    - README.md
    - .eslintrc.yml
    - tests/**
    - coverage/**
    - "*.sh"
    - "**/*.test.js"
    - npm-packages-offline-cache/**
    - src/__mocks__/**

custom:
  kinesis:
    streams:
      scoreStream: ${self:service}-${opt:stage}-scoreStream
  dynamodb:
    tables:
      leaderboardTable:
        baseTable: ${self:service}-${opt:stage}-leaderboardTable
        gsi:
          scoresByDatedScoreBlock: ${self:service}-${opt:stage}-leaderboardTable-scoresByDatedScoreBlock

functions:
  # Methods
  testFunction:
    handler: src/leaderboards/model/facet.handler
    environment:
      SCORES_BY_DATED_SCORE_BLOCK_INDEX: ${self:custom.dynamodb.tables.leaderboardTable.gsi.scoresByDatedScoreBlock}
      LEADERBOARD_TABLE: ${self:custom.dynamodb.tables.leaderboardTable.baseTable}    

  scoreStreamHandle:
    handler: src/score-stream-handler.handler
    timeout: 300
    environment:
      LEADERBOARD_TABLE: ${self:custom.dynamodb.tables.leaderboardTable.baseTable}
    events:
      - stream:
          type: kinesis
          batchSize: 10
          startingPosition: LATEST          
          arn:
            Fn::GetAtt:
              - scoreStream
              - Arn

  getLeaderboard:
    handler: src/get-leaderboard.handler
    environment:
      SCORES_BY_DATED_SCORE_BLOCK_INDEX: ${self:custom.dynamodb.tables.leaderboardTable.gsi.scoresByDatedScoreBlock}
      LEADERBOARD_TABLE: ${self:custom.dynamodb.tables.leaderboardTable.baseTable}    
    events:
      - http:
          path: leaderboard
          method: get
          cors: true


resources:
  Resources:
    scoreStream:
      Type: "AWS::Kinesis::Stream"
      Properties: 
        Name: ${self:custom.kinesis.streams.scoreStream}
        RetentionPeriodHours: 24
        ShardCount: 1

    # Updating score requires
    # - 1 Write/Read to base table (conditionals may make this just 1 write)
    # - 2 Writes to index
    leaderboardTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.dynamodb.tables.leaderboardTable.baseTable}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S # eg. <uuid>
          - AttributeName: datedScore
            AttributeType: S # eg. month_2017/09
          - AttributeName: datedScoreBlock
            AttributeType: S # eg. month_2017/09_1
          - AttributeName: score
            AttributeType: N # eg. 10
        KeySchema:
          # Allows us to fetch a scores by a specific userId
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: datedScore
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          # Allows us to lookup top scores in a block
          - IndexName: ${self:custom.dynamodb.tables.leaderboardTable.gsi.scoresByDatedScoreBlock}
            KeySchema:
             - AttributeName: datedScoreBlock
               KeyType: HASH
             - AttributeName: score
               KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5